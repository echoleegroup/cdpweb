{"version":3,"sources":["routes/api/Overview.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AACA,0CAA4C;AAE5C,uCAA8C;AAC9C,4BAA0B;AAI1B,wCAAoC;AAGpC,4DAAwD;AASxD,IAAa,gBAAgB;IAAS,oCAAY;IAUhD,0BACkC,eAAiC;QADnE,YAGE,iBAAO,SAER;QADC,KAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;;IAC1C,CAAC;IAKD,+BAAI,GAAJ,UAAK,MAAc;QAAnB,iBAsBC;QArBC,OAAO,CAAC,GAAG,CAAC,mDAAmD,CAAC,CAAC;QACjE,MAAM,CAAC,GAAG,CAAC,6CAA6C,EAAE,UAAC,GAAY,EAAE,GAAa,EAAE,IAAiB;YACvG,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC;YAClC,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;gBACjB,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC;gBACrB,KAAI,CAAC,YAAY,CAAC,GAAG,EAAE,EAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,4BAA4B,EAAC,CAAC,CAAC;YAC/F,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,MAAM,GAAW,GAAG,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC;gBAE/C,IAAI,CAAC,GAAW,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC1C,IAAI,QAAQ,SAAU,CAAC;gBACvB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACZ,QAAQ,GAAG,sBAAQ,CAAC,SAAS,CAAC;gBAChC,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACnB,QAAQ,GAAG,sBAAQ,CAAC,SAAS,CAAC;gBAChC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,QAAQ,GAAG,sBAAQ,CAAC,GAAG,CAAC;gBAC1B,CAAC;gBACD,KAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;YACzD,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAWD,gDAAqB,GAArB,UAAsB,GAAa,EAAE,KAAa,EAAE,MAAc,EAAE,QAAkB;QAAtF,iBASC;QARC,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC;aACnE,IAAI,CAAC,UAAC,MAAkC;YACvC,KAAI,CAAC,YAAY,CAAC,GAAG,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAC,GAAG,EAAE,SAAS,EAAC,EAAE,EAAC,CAAC,CAAC;QACrE,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,GAAG;YAER,KAAI,CAAC,YAAY,CAAC,GAAG,EAAE,EAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,WAAW,EAAC,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;IACL,CAAC;IACH,uBAAC;AAAD,CA/DA,AA+DC,CA/DqC,wBAAY,GA+DjD;AA/DY,gBAAgB;IAD5B,sBAAU,EAAE;IAYR,WAAA,kBAAM,CAAC,gBAAK,CAAC,gBAAgB,CAAC,CAAA;;GAXtB,gBAAgB,CA+D5B;AA/DY,4CAAgB","file":"Overview.js","sourcesContent":["import { NextFunction, Request, Response, Router } from 'express';\nimport { BaseApiRoute } from '../API_Route';\n// Dependency injection\nimport { injectable, inject} from 'inversify';\nimport 'reflect-metadata';\nimport { IOverviewApiRoute } from './interface/IOverview';\n// Dependency injection - business logic\nimport { IOverviewService} from '../../bl/backend/interface/IOverview';\nimport { TYPES } from '../di_types';\n// Entity\nimport { socialPostingCountEntity } from '../../bm/backend/Overview/social-posting-count-entity';\nimport { EnumGene } from '../../bm/backend/common-enum';\n\n\n/**\n * / route\n *\n * @class User\n */\n@injectable()\nexport class OverviewApiRoute extends BaseApiRoute implements IOverviewApiRoute {\n\n  private _overviewService: IOverviewService;\n\n  /**\n   * Constructor\n   *\n   * @class IndexRoute\n   * @constructor\n   */\n  constructor(\n    @inject(TYPES.IOverviewService) overviewService: IOverviewService\n  ) {\n    super();\n    this._overviewService = overviewService;\n  }\n\n  /**\n   * Initialize all routes\n   */\n  init(router: Router) {\n    console.log('[IndexRoute::create] Creating Overview api route.');\n    router.get('/china_mobile/overview/social_posting/count', (req: Request, res: Response, next:NextFunction) => {\n      let brand = req.query.brand || '';\n      if (brand === '') {\n        res.statusCode = 500;\n        this.api_response(res, {data: '', api_code: '2.1', error_msg: 'Invalid mobile phone brand'});\n      } else {\n        let series: string = req.query.series || 'all';\n        // g represents genedata. Should pass 1, 2 or all\n        let g: number = parseInt(req.query.g, 10);\n        let geneType: EnumGene;\n        if (g === 1) {\n          geneType = EnumGene.GeneData1;\n        } else if (g === 2) {\n          geneType = EnumGene.GeneData2;\n        } else {\n          geneType = EnumGene.All;\n        }\n        this.getSocialPostingCount(res, brand, series, geneType);\n        }\n    });\n  }\n\n  /**\n   * The home page route.\n   *\n   * @class IndexRoute\n   * @method index\n   * @param req {Request} The express Request object.\n   * @param res {Response} The express Response object.\n   * @next {NextFunction} Execute the next method.\n   */\n  getSocialPostingCount(res: Response, brand: string, series: string, geneType: EnumGene) {\n    this._overviewService.getSocialPostingCount(brand, series, geneType)\n    .then((entity: socialPostingCountEntity[]) => {\n      this.api_response(res, {data: entity, api_code:'0', error_msg:''});\n    })\n    .catch(err => {\n      // Log err\n      this.api_response(res, {data: '', api_code: '2', error_msg: 'api error'});\n    });\n  }\n}"],"sourceRoot":"/Users/kurtjiang/Maxnerva/Projects/Forestage/src"}